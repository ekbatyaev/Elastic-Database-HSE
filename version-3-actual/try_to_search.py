import asyncio
import datetime
import re
from typing import List

import requests
import json

# Указываем URL FastAPI сервера

url = "url"

question = ("Как получить пропуск?")

print(question)
# Пример данных для запроса

# Указываем секретный токен для авторизации
headers = {
    "token": "token"
}

# Выполняем POST-запрос
first_time = datetime.datetime.now()
term_patterns = {
    "НЭ": [r'\bНЭ\b', r'\bнезависим[а-я]* экзамен[а-я]*\b'],
    "НЭ по англ": [r'\bНЭ по англ\b', r'\bнезависим[а-я]* экзамен[а-я]* по английск[а-я]* язык[а-я]*\b'],
    "НЭ по ЦГ": [r'\bНЭ по ЦГ\b', r'\bнезависим[а-я]* экзамен[а-я]* по цифров[а-я]* грамотност[а-я]*\b'],
    "ЦГ": [r'\bЦГ\b', r'\bцифров[а-я]* грамотност[а-я]*\b'],
    "АнДан": [r'\bАнДан\b', r'\bанализ[а-я]* данн[а-я]*\b'],
    "НЭ по АнДан": [r'\bНЭ по АнДан\b', r'\bнезависим[а-я]* экзамен[а-я]* по анализ[а-я]* данн[а-я]*\b'],
    "НЭ по питону": [r'\bНЭ по питону\b', r'\bнезависим[а-я]* экзамен[а-я]* по программировани[а-я]*\b'],
    "НЭ по проге": [r'\bНЭ по проге\b', r'\bнезависим[а-я]* экзамен[а-я]* по программировани[а-я]*\b'],
    "датакалче": [r'\bдатакалче\b', r'\bцифров[а-я]* компетенци[а-я]*\b'],
    "РУП": [r'\bРУП\b', r'\bрабоч[а-я]* учебн[а-я]* план[а-я]*\b'],
    "БУП": [r'\bБУП\b', r'\bбольш[а-я]* учебн[а-я]* план[а-я]*\b'],
    "ПУД": [r'\bПУД\b', r'\bпрограмм[а-я]* учебн[а-я]* дисциплин[а-я]*\b'],
    "ГИА": [r'\bГИА\b', r'\bгосударственн[а-я]* итогов[а-я]* аттестаци[а-я]*\b'],
    "ВКР": [r'\bВКР\b', r'\bвыпускн[а-я]* квалификационн[а-я]* работ[а-я]*\b'],
    "КР": [r'\bКР\b', r'\bкурсов[а-я]* работ[а-я]*\b'],
    "ИУП": [r'\bИУП\b', r'\bиндивидуальн[а-я]* учебн[а-я]* план[а-я]*\b'],
    "ДОЦ": [r'\bДОЦ\b', r'\bдисциплин[а-я]* общ[а-я]* цикл[а-я]*\b'],
    "ОУФ": [r'\bОУФ\b', r'\bобщеуниверситетск[а-я]* факультатив[а-я]*\b'],
    "РКИ": [r'\bРКИ\b', r'\bрусск[а-я]* язык[а-я]* как иностранн[а-я]*\b'],
    "ДПО": [r'\bДПО\b', r'\bдополнительн[а-я]* профессиональн[а-я]* образовани[а-я]*\b'],
    "КУД": [r'\bКУД\b', r'\bпоказател[а-я]* качеств[а-я]* учебн[а-я]* деятельност[а-я]*\b'],
    "ИИ": [r'\bИИ\b', r'\bискусственн[а-я]* интеллект[а-я]*\b'],
    "СОП": [r'\bСОП\b', r'\bстуденческ[а-я]* оценк[а-я]* преподавани[а-я]*\b'],
    "СОКУОП": [r'\bСОКУОП\b', r'\bстуденческ[а-я]* оценк[а-я]* качеств[а-я]* управлени[а-я]* образовательн[а-я]* программ[а-я]*\b'],
    "матпомощь": [r'\bматпомощь\b', r'\bматериальн[а-я]* помощ[а-я]*\b'],
    "ЭЦП": [r'\bЭЦП\b', r'\bэлектронн[а-я]* цифров[а-я]* подпись[а-я]*\b'],
    "Сервисный кредит": [r'\bсервисн[а-я]* кредит[а-я]*\b'],
    "накоп": [r'\bнакоп\b', r'\bнакопленн[а-я]* оценк[а-я]*\b'],
    "военка": [r'\bвоенка\b', r'\bвоенн[а-я]* подготовк[а-я]*\b'],
    "НИРС": [r'\bНИРС\b', r'\bконкурс[а-я]* научн[а-я]* исследовательск[а-я]* работ[а-я]* студент[а-я]*\b'],
    "НУЛ": [r'\bНУЛ\b'],
    "ПУЛ": [r'\bПУЛ\b'],
    "НОК": [r'\bНОК\b'],
    "прога": [r'\bпрога\b', r'\bпрограммировани[а-я]*\b'],
    "англ": [r'\bангл\b', r'\bанглийск[а-я]* язык[а-я]*\b'],
    "внутренний": [r'\bвнутренн[а-я]* экзамен[а-я]* по английск[а-я]* язык[а-я]*\b'],
    "экз": [r'\bэкз\b', r'\bэкзамен[а-я]*\b'],
    "ОП": [r'\bОП\b', r'\bобразовательн[а-я]* программ[а-я]*\b'],
    "АР": [r'\bАР\b', r'\bакадемическ[а-я]* руководител[а-я]*\b'],
    "учебка": [r'\bучебк[а-я]*\b', r'\bучебн[а-я]* офис[а-я]*\b'],
    "научник": [r'\bнаучник\b', r'\bнаучн[а-я]* руководител[а-я]*\b'],
    "академ": [r'\bакадем\b', r'\bакадемическ[а-я]* отпуск[а-я]*\b'],
    "социалка": [r'\bсоциалк[а-я]*\b', r'\bсоциальн[а-я]* транспортн[а-я]* карт[а-я]*\b'],
    "неуд": [r'\bнеуд\b', r'\bнеудовлетворительн[а-я]* оценк[а-я]*\b'],
    "КПВ": [r'\bКПВ\b', r'\bкампан[а-я]* по выбор[а-я]* курс[а-я]*\b'],
    "числануть": [r'\bчислануть\b', r'\bотчисл[а-я]*\b'],
    "долг": [r'\bдолг\b', r'\bакадемическ[а-я]* задолженн[а-я]*\b'],
    "микродигри": [r'\bмикродигри\b', r'\bmicrodegree\b'],
    "ВУЦ": [r'\bВУЦ\b', r'\bвоенн[а-я]* учебн[а-я]* центр[а-я]*\b'],
    "ВБМ": [r'\bВБМ\b', r'\bвакантн[а-я]* бюджетн[а-я]* мест[а-я]*\b'],
    "БЖД": [r'\bБЖД\b', r'\bбезопасн[а-я]* жизнедеятельност[а-я]*\b'],
    "МООК": [r'\bМООК\b', r'\bмассов[а-я]* открыт[а-я]* онлайн курс[а-я]*\b'],
    "РУЗ": [r'\bРУЗ\b', r'\bрасписани[а-я]* учебн[а-я]* занят[а-я]*\b'],
    "ЛМС": [r'\bЛМС\b', r'\blearning management system\b'],
    "LMS": [r'\bLMS\b', r'\blearning management system\b'],
    "SmartLMS": [r'\bSmartLMS\b', r'\bsmart learning management system\b'],
    "смарт лмс": [r'\bсмарт лмс\b', r'\bsmart learning management system\b'],
    "Smart LMS": [r'\bSmart LMS\b', r'\bsmart learning management system\b'],
    "ПГАС": [r'\bПГАС\b', r'\bповышенн[а-я]* государственн[а-я]* академическ[а-я]* стипенди[а-я]*\b'],
    "ГАС": [r'\bГАС\b', r'\bгосударственн[а-я]* академическ[а-я]* стипенди[а-я]*\b'],
    "ПОПАТКУС": [r'\bПОПАТКУС\b', r'\bположени[а-я]* о промежуточн[а-я]* аттестаци[а-я]* и текущ[а-я]* контрол[а-я]* успеваемост[а-я]* студент[а-я]*\b'],
    "ПГСС": [r'\bПГСС\b', r'\bповышенн[а-я]* государственн[а-я]* социальн[а-я]* стипенди[а-я]*\b'],
    "ГСС": [r'\bГСС\b', r'\bгосударственн[а-я]* социальн[а-я]* стипенди[а-я]*\b'],
    "ЭПП": [r'\bЭПП\b', r'\bэлемент[а-я]* практическ[а-я]* подготовк[а-я]*\b'],
    "ЕЛК": [r'\bЕЛК\b', r'\bедин[а-я]* личн[а-я]* кабинет[а-я]*\b'],
    "СтЭП": [r'\bСтЭП\b', r'\bстуденческ[а-я]* электронн[а-я]* портфолио\b']
}


async def extract_terms_simple(text: str) -> List[str]:
    try:
        found_terms = []
        for term, patterns in term_patterns.items():
            for pattern in patterns:
                if re.search(pattern, text, re.IGNORECASE):
                    found_terms.append(term)
                    break
        return found_terms
    except Exception as e:
        print(f"Error extracting terms: {e}")
        return []

search_request = {
    "query": question,
    "edu_level": "бакалавриат",
    "campus": "Нижний Новгород",
    "topic_tag": ["Учебный процесс"] + asyncio.run(extract_terms_simple(question)),
    "fragment_size": 800,
    "count_doc_return": 3,
    "count_doc_rerank": 5
    # "coef_norm_sim" : 0.7,
    # "coef_doc_bonus": 0.2,
    # "coef_text_match":0.1
}

response = requests.post(url, json=search_request, headers=headers)
# Проверяем статус ответа
if response.status_code == 200:
    # Выводим результаты поиска
    results = response.json()
    # print(results[0]['full_text'])
    results[0]["search_request"] = search_request
    print("Время получения ответа: ", (datetime.datetime.now() - first_time).total_seconds())
    # print(results)

    with open('answer_data_1.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=4)